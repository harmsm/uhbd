060522: (0.6.1)
 - Changed output directory structure slightly.  Now includes subfolders for
   dielectric constants.
      Used to be:
         uhbd_calcs/{0.1,0.2...}
      Now:
         uhbd_calcs/{D4,D10..}/{0.1,0.2...}

 - Changed temporary directory.  Now writes out sane date.  Instead of random
   number, appends sequential letter.  Also now writes to $HOME/.pyUHBD instead
   of script/scratch/.  (For multiple users).

061219:
 - Moved pyUHBD into CVS.  0.6.1 release tagged to r0-6-1.

070130: (1.0.0)
 - Major rewrite of pyUHBD.  Changed entire underlying module structure.
 - Now able to run full or single-site command lines.
 - Changed interface to comply with GNU/Posix standard.
 - Able to titrate arbitrary variables (not just protein dielectric constant and
   ionic strength).
 - Combined with addH to efficiently add polar hydrogens.
 - Removed temporary directory structure (calculations now done in their final
   directories).  
 - Tagged first CVS release as r1-0-0

070130:
 - For single-site claculations, n_terminus addition does not work unless first
   residue is 1.  If first residue is 1, an n terminus will always be added
   (even if you don't specify the flag).  I'll probably have to rewrite
   prepares.
 - Still need to deal with nasty header business.  If your pdb file does not
   have a header line, the fortran silently mangles everything and spits out
   almost-but-not-entirely-unreasonable results.
 - Currently cannot deal with multiple chains, termini, or chains with breaks.
 - I/O (particularly for addH) is pretty bad.

070131:
 - When doing addH on files from MD trajectory, the program crashed because not
   all HIS are named HIS.  I altered common/ProcessInputFiles.py so that it
   could find HIS named HSE or HSD as well.

070201:
 - Altered ParseCharmm|Uhbd.py.  Now sorts file_list before passing to UHBD.
 - Altered CharmmInterface.py.  Made titr_dict and possible_his compatible with
   GROMACS pdb files.  (i.e. HISA/HISB/LYSH recognized residues.)
 - Added UhbdSingleFunctions.py.  This module is exactly analogous to
   UhbdFullFunctions and performs prepares and doinps.  As a consequence,
   termini addition now works properly.

070202:
 - Fixed removed SomeError except statement.  (Error would be raised as IOError
   in SystemOps).

080128:
 - I moved the addH capability into the pdb_tools module. The program now adds
   termini correctly by comparing the ATOM sequence to the SEQRES sequence to 
   determine if the whole sequence is in the structure.  The user can no longer
   specify whether or not to use termini.  
 - Deals with multiple chains (they are flattened by pdb_addH.py)
 - Fixes incorrect pdb file headers.
 - Accepts pdb files with arbitrarily long file names.   This previously did not
   work because the original fortran only looks at 30 characters.  To get around
   this, the program renames all pdb files to proteinH.pdb before passing to
   UHBD).
 - Checks for errors in the UHBD output.  
 - Spits out a more detailed log of what it is doing at each step.

080519:
 - Changed output directory structure so it no longer has single or full 
   subdirectory.  This is because the full/single calculations have to be in 
   separate directories anyway because they have different pdb files.  This
   directory was therefore superfluous.
 - Full calculation now saves sites.dat (required for the "hybrid" calculation
   if done later).
 - Input pdb file now saved in each output directory.  Each directory now 
   contains all information required to repeat the calculation manually.
 - prepareFull no longer queries parameter file to see what residues to place 
   in allgroups.pdb.  Although this was probably the correct way to do this,
   the "standard" implementation is to always take a certain set of atoms for
   every residue, regardless of what's in the parameter file.  Stupid.  I 
   deleted my "correct" code; it can be recapitulated by using svn to access
   revision 190.
